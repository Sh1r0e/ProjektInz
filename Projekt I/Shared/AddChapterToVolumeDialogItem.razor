@using Projekt_I.Data.Models;
@inject IMatDialogService MatDialogService
@inject FirestoreService FirestoreService


<MatDialogTitle style="display: flex; align-items: center;">
    <div style="flex: 1;">Add chapter</div>
    <div @onclick="@(_=>CloseDialog())" style="cursor: pointer;">
        <MatIcon Icon="@MatIconNames.Close"></MatIcon>
    </div>
</MatDialogTitle>
<MatDialogContent>
    <MatTextField Label="Choose title for chapter" @bind-Value="@Title"></MatTextField>


</MatDialogContent>
<MatDialogActions>
    <MatButton OnClick="@(_ => AddChapterToVolume())">Add Chapter</MatButton>

    <MatButton OnClick="@(_ => CloseDialog())">Close</MatButton>

</MatDialogActions>

@code {

    [Parameter]
    public string NovelId { get; set; }

    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public string VolumeId { get; set; }

    [Parameter]
    public string Title { get; set; }

    [CascadingParameter]
    public MatDialogReference DialogReference { get; set; }

    async Task<Chapter> AddChapterToVolume()
    {
        if (Title != null)
        {
            var result = await FirestoreService.AddChapterToVolume(UserId, NovelId, VolumeId, Title);
            if (result != null)
            {
                DialogReference.Close(result);

                await MatDialogService.AlertAsync("Chapter added");
                return result;
            }

            await MatDialogService.AlertAsync("Failed to add chapter");
            return null;

        }

        await MatDialogService.AlertAsync("Title can not be empty.");
        return null;

    }

    async Task CloseDialog()
    {
        DialogReference.Close("Test");
    }

}
